// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String // Hashed password
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  permits   Permit[] // Permits issued by this user
  auditLogs AuditLog[]
  recoveryTokens RecoveryToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

model Student {
  id        Int      @id @default(autoincrement())
  studentId String   @unique
  name      String
  email     String
  course    String
  level     String
  number    String
  permits   Permit[] // Permits issued to this student
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permit {
  id             Int      @id @default(autoincrement())
  permitCode     String   @unique // Hashed permit code
  originalCode   String   @unique // Original permit code
  status         String   @default("active") // active, revoked, expired
  validityPeriod Int      // Number of days
  amountPaid     Float
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      Int
  issuedBy       User     @relation(fields: [issuedById], references: [id])
  issuedById     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  details   String
  createdAt DateTime @default(now())
}

model RecoveryToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}
